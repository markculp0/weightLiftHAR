data("segmentationOriginal")
training <- subset(segmentationOriginal, Case== "Train")
testing <- subset(segmentationOriginal, Case == "Testing")
testing <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
modfit <- train(Class ~ ., method = "rpart", data = segmentationOriginal)
modfit
print(modfit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
modfit <- train(Area ~ ., method = "rpart", data = olive)
print(modfit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
?tree
?tree
val <- predict(modfit, newdata = newdata)
val
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
pred <- predict(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = testSA)
pred <- predict(modfit, data = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
result <- missClass(trainSA$chd, pred)
result
result <- missClass(testSA$chd, pred)
result
pred2 <- predict(modfit, data = trainSA)
result2 <- missClass(trainSA$chd, pred2)
pred <- predict(modfit, data = testSA)
result <- missClass(testSA$chd, pred)
result <- missClass(testSA$chd, pred2)
result <- missClass(testSA$chd, pred2)
result <- missClass(testSA$chd, pred1)
result <- missClass(testSA$chd, pred2)
result <- missClass(testSA$chd, pred)
result
result2
result2 <- missClass(trainSA$chd, pred)
rm(result, result2)
result <- missClass(testSA$chd, pred)
result2 <- missClass(trainSA$chd, pred)
rm(result, result2)
set.seed(13234)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
pred <- predict(modfit, data = testSA)
result <- missClass(testSA$chd, pred)
result <- missClass(testSA$chd, pred2)
set.seed(13234)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
pred <- predict(modfit, data = testSA, type = "response")
pred <- predict(modfit, newdata = testSA, type = "response")
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, glm=list(family=binomial))
pred <- predict(modfit, newdata = testSA, type = "response")
require(earth)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, glm=list(family=binomial))
rm(modfit)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, degree = 1, glm=list(family=binomial))
pred <- predict(modfit, newdata = testSA, type = "response")
install.packages("earth")
set.seed(13234)
rm (modfit)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, degree = 1, glm=list(family=binomial))
pred <- predict(modfit, newdata = testSA, type = "response")
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, degree = 1, method = "glm", family = "binomial")
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
modfit <- train(trainSA[,c(2,3,6,7,8,9)], trainSA$chd, data = trainSA, method = "glm", family = "binomial")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.test)
vowel.test
str(vowel.test)
as.factor(vowel.test$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
?randomForest
rf1 <- randomForest(x = vowel.train[,-1], y = vowel.train[,2:10], importance = T)
rf1 <- randomForest(x = vowel.train[,-1], importance = T)
rf1
print(rf1$importance)
print(rf1)
rf1 <- randomForest(y ~ ., data = vowel.train, importance = T)
rf1
print(rf1)
print(rf1)
print(rf1$importance)
print(rf1)
rf1 <- randomForest(y ~ ., data = vowel.train, mtry = 3, importance = T, na.action = na.omit)
print(rf1)
round(importance(rf1),2)
round(importance(rf1),2)
data("segmentationOriginal")
training <- subset(segmentationOriginal, Case== "Train")
testing <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
modfit <- train(Class ~ ., method = "rpart", data = training)
modfit
modFit$finalModel
modfit$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
modfit <- train(Area ~ ., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
val <- predict(modfit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
pred <- predict(modfit, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
result <- missClass(testSA$chd, pred)
pred2 <- predict(modfit, data = trainSA)
result2 <- missClass(trainSA$chd, pred2)
q()
setwd("~/code/r/coursera/20170528_machLearn/project/weightLiftHAR")
train <- read.csv("../data/pml-training.csv")
user <- unique(sort(train$user_name))
user
View(train)
names(train)
train <- read.csv("../data/pml-testing.csv")
rm(train)
training <- read.csv("../data/pml-training.csv")
testing <- read.csv("../data/pml-testing.csv")
View(testing)
names(train)
names(training)
str(testing)
cols <- str(testing)
tail(cols)
str(testing[,100:160])
str(training[,100:160])
str(testing)
str(training)
class(testing)
str(testing)
lapply(training, class)
?str
summary(testing)
sapply(training, class)
names(training)
trainName <- names(training)
testName <- names(testing)
diff(trainName, testName)
testName
class(testName)
strsplit(testName, fixed = T)
strsplit(testName, '\t', fixed = T)
sapply(training, class)
trainClass <- sapply(training, class)
testName
trainClass
class(trainClass)
typeof(testName)
dim(trainClass)
typeof(testName)
mode(testName)
is.atomic(testName)
attr(testName)
print(trainName)
intersect(testName, trainName)
testClass <- sapply(testing, class)
intersect(trainClass, testClass)
class(testClass)
testClass
strsplit(testClass, '\t', fixed = T)
strsplit(testClass, '\t', fixed = T)
tstClass <- strsplit(testClass, '\t', fixed = T)
tstClass
trnClass <- strsplit(trainClass, '\t', fixed = T)
intersect(trnClass, tstClass)
q()
setwd("~/code/r/coursera/20170528_machLearn/wk4/quiz4")
library(gbm)
install.packages("gbm")
install.packages("forecast")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.test)
View(vowel.train)
as.factor(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
library(caret)
set.seed(33833)
modRF <- train(y ~ ., data = vowel.train, method = "rf")
modGbm <- train(y ~ ., data = vowel.train, method = "gbm")
predRF <- predict(modRF, vowel.test)
predGbm <- predict(modGbm, vowel.test)
predRF
predGbm
confusionMatrix(predRF, vowel.test$y)
confusionMatrix(predGbm, vowel.test$y)
agree <- vowel.test[predRF == predGbm,]
agree
predComb <- predict(predRF, agree)
agreeIndex <- (predRF == predGbm)
agreeIndex
confusionMatrix(predRF[agreeIndex], vowel.test$y[agreeIndex])
confusionMatrix(predRF[agreeIndex]$overall['Accuracy'], vowel.test$y[agreeIndex])
confusionMatrix(predRF[agreeIndex], vowel.test$y[agreeIndex])
ls()
env.profile()
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modRF <- train(diagnosis ~ ., data = training, method = "rf")
predRF <- predict(modRF, testing)
confusionMatrix(predRF, testing$diagnosis)
modGbm <- train(diagnosis ~ ., data = training, method = "gbm")
predGbm <- predict(modGbm, testing)
confusionMatrix(predGbm, testing$diagnosis)
modLda <- train(diagnosis ~ ., data = training, method = "lda")
predLda <- predict(modLda, testing)
confusionMatrix(predLda, testing$diagnosis)
predDF <- data.frame(predRF,predGbm, predLda, diagnosis = diagnosis)
diagnosis
predDF <- data.frame(predRF,predGbm, predLda)
modComb <- train(diagnosis ~ ., data = predDF, method = "rf")
predDF <- data.frame(predRF, predGbm, predLda, diagnosis = testing$diagnosis)
modComb <- train(diagnosis ~ ., data = predDF, method = "rf")
predComb <- predict(modComb, predDF)
confusionMatrix(predLda, testing$diagnosis)
set.seed(62433)
modRF <- train(diagnosis ~ ., data = training, method = "rf")
predRF <- predict(modRF, testing)
confusionMatrix(predRF, testing$diagnosis)
modGbm <- train(diagnosis ~ ., data = training, method = "gbm")
predGbm <- predict(modGbm, testing)
confusionMatrix(predGbm, testing$diagnosis)
modLda <- train(diagnosis ~ ., data = training, method = "lda")
predLda <- predict(modLda, testing)
confusionMatrix(predLda, testing$diagnosis)
predDF <- data.frame(predRF, predGbm, predLda, diagnosis = testing$diagnosis)
modComb <- train(diagnosis ~ ., data = predDF, method = "rf")
predComb <- predict(modComb, predDF)
confusionMatrix(predLda, testing$diagnosis)
confusionMatrix(predComb, testing$diagnosis)
?plot.enet
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
?plot.enet
??plot.enet
install.packages("elasticnet")
library(elasticnet)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modLso <- enet(training$CompressiveStrength ~ ., lambda = 0)
modLasso <- train(CompressiveStrength ~ .,  data = training, method = "lasso")
set.seed(233)
modLasso <- train(CompressiveStrength ~ .,  data = training, method = "lasso")
?plot.enet
plot(modLasso, xvar="step")
View(training)
plot(modLasso, trace = T, xvar="step")
print(modLasso)
print(modLasso, trace = T)
print(modLasso$pred, trace = T)
modLasso$pred
modLasso$finalModel
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
library(lubridate) # For year() function below
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
?bats
View(testing)
fit <- bats(training$date)
fit <- bats(training)
str(training)
as.Date(training$date)
str(training)
training$date  <- as.Date(training$date)
testing$date <- as.Date(testing$date)
fit <- bats(training$date)
?forecast
fc <- forcast(testing$date, model = fit)
fc <- forecast(testing$date, model = fit)
fc
fc <- forecast(testing$date, model = fit, level = c(95))
fc
fc$upper
fc$x
x <- fc$x
?bats
fit <- bats(training$date, training$visitsTumblr)
?ts
View(training)
x <- ts(training$visitsTumblr, frequency = 365)
fit <- tbats(x)
fc <- forecast(testing$date, model = fit, level = c(95))
forcast(fit)
forecast(fit)
fit <- bats(tstrain)
tstrain
fc = forecast(fit, nrow(testing))
fc$x
plot(fc)
fc$lower
fc$lower[,2]
lo <- fc$lower[,2]
hi <- fc$upper[,2]
table((testing$visitsTumblr>lo) & (testing$visitsTumblr<hi))
226/nrow(testing)
fc$upper
library("e1071")
library("e1071")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[ -inTrain,]
set.seed(325)
fit = svm(CompressiveStrength ~ ., data=training)
pred <- predict(fit, newdata = testing)
err <- pred - testing$CompressiveStrength
sqrt(mean(err^2))
table((testing$visitsTumblr>lo) & (testing$visitsTumblr<hi))
library(elasticnet)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
View(training)
modLasso <- train(CompressiveStrength ~ .,  data = training, method = "lasso")
modLasso$finalModel
plot.enet(modLasso)
obj <- enet(x = as.matrix(training[,1:8]), y = training$CompressiveStrength, lambda = 0)
obj
plot.enet(obj, xvar=c("penalty"))
?plot.enet
plot.enet(obj, xvar=c("step"))
obj <- enet(x = as.matrix(training[,1:8]), trace = T, y = training$CompressiveStrength, lambda = 0)
obj <- enet(x = as.matrix(training[,1:8]), sparse ="penalty", trace = T, y = training$CompressiveStrength, lambda = 0)
print.enet(obj)
obj$allset
obj$actions
obj <- enet(x = as.matrix(training[,1:8]), trace = T, y = training$CompressiveStrength, lambda = 0)
obj <- enet(x = as.matrix(training[,1:8]), trace = T, y = training$CompressiveStrength, lambda = 7)
obj <- enet(x = as.matrix(training[,1:8]), trace = T, y = training$CompressiveStrength, lambda = 8)
print.enet(obj)
obj <- enet(x = as.matrix(training[,1:8]), trace = T, y = training$CompressiveStrength, lambda = 1)
print.enet(obj)
set.seed(233)
obj <- enet(x = as.matrix(training[,1:8]), trace = T, y = training$CompressiveStrength, lambda = 1)
print.enet(obj)
training <- read.csv("../data/pml-training.csv")
testing <- read.csv("../data/pml-testing.csv")
View(testing)
View(testing)
View(training)
user <- unique(sort(train$user_name))
user <- unique(sort(training$user_name))
user
trainClass <- sapply(training, class)
testClass <- sapply(testing, class)
intersect(testName, trainName)
?intersect
intersect(testClass, trainClass)
testClass
trainCols <- names(training)
testCols <- names(testing)
setdiff(trainCol, testCol)
trainCol <- names(training)
testCol <- names(testing)
setdiff(trainCol, testCol)
setdiff(testClass, trainClass)
testCol
rm(testCol, testCols, trainCol, trainCols)
as.character(trainClass)
as.character(testClass)
training$classe
testing$problem_id
table(training$classe)
trainClass <- as.character(trainClass)
testClass <- as.character(testClass)
setdiff(testClass, trainClass)
union(trainClass, testClass)
diff(testClass, trainClass)
setdiff(trainCol, testCol)
setdiff(testClass, trainClass)
trainClass - testClass
trainCol <- names(training)
testCol <- names(testing)
setdiff(trainCol, testCol)
setdiff(testCol, trainCol)
?setdiff
setdiff(testClass, trainClass)
setdiff(trainClass, testClass)
trainClass <- sapply(training, class)
testClass <- sapply(testing, class)
setdiff(testClass, trainClass)
user
training <- read.csv("../data/pml-training.csv")
testing <- read.csv("../data/pml-testing.csv")
na_count <-function (x) sapply(x, function(y) sum(is.na(y)))
na_count(training)
na_count(training) > 19000
boolNAs <- na_count(training) > 19000
sum(boolNAs)
train2 <- training[-boolNAs,]
train2 <- training[,-boolNAs]
train2 <- training[,boolNAs]
boolNAs <- na_count(training) < 19000
sum(boolNAs)
train2 <- training[,boolNAs]
test2 <- testing[,boolNAs]
rm(boolNAs,training, testing)
rm(na_count)
trainCol <- names(training)
trainCol <- names(train2)
testCol <- names(test2)
setdiff(trainCol, testCol)
setdiff(testCol, trainCol)
View(train2)
names(train2)
View(train2)
rm(trainCol, testCol)
train2[,-c(1,3:5)]
na_count <-function (x) sapply(x, function(y) sum(is.na(y)))
na_count(train2)
View(train2)
class(train2)
trainClass <- sapply(training, class)
trainClass <- sapply(train2, class)
trainClass
train2$kurtosis_roll_belt
table(train2$kurtosis_roll_belt)
sum(train2$kurtosis_roll_belt == "")
empty_count <-function (x) sapply(x, function(y) sum(y == ""))
empty_count(train2)
boolNotEmpty <- empty_count(training) < 19000
boolNotEmpty <- empty_count(train2) < 19000
sum(boolNotEmpty)
trainClass
empty_count(train2)
sum(boolNotEmpty)
train3 <- train2[,boolNotEmpty]
test3 <- test2[,boolNotEmpty]
rm(boolNotEmpty,train2, test2)
View(train3)
rm(empty_count, na_count)
trainClass <- sapply(train3, class)
trainClass
View(train3)
table(train3$new_window)
table(train3$num_window)
train4 <- train3[,-c(1,3:7)]
View(train4)
test4 <- test3[,-c(1,3:7)]
View(test4)
View(test3)
rm(test3,train3)
rm(trainClass)
trainCol <- names(train4)
testCol <- names(test4)
setdiff(trainCol, testCol)
setdiff(testCol, trainCol)
rm(trainCol, testCol)
library(caret)
inTrain <- createDataPartition(train4, p=0.7, list = F)
inTrain <- createDataPartition(train4$classe, p=0.7, list = F)
valid4 <- train4[-inTrain,]
train5 <- train4[inTrain,]
train4 <- train4[inTrain,]
rm(train5)
rm(inTrain)
library(randomForest)
names(train4[,54])
name(train4[,54])
names(train4)
modFit <- train(classe ~ ., data = train4, method = "rf", prox = T)
